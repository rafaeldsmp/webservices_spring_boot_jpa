package com.github.example.entities;

import java.io.Serializable;
import java.util.HashSet;
import java.util.Objects;
import java.util.Set;

import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.JoinTable;
import jakarta.persistence.ManyToMany;
import jakarta.persistence.OneToMany;
import jakarta.persistence.Table;

@Entity
@Table(name = "tb_product")
public class Product implements Serializable {

	private static final long serialVersionUID = 1L;
	
	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private Long id;
	private String name;
	private String description;
	private Double price;
	private String imgUrl;
	
	//nós instanciamos para garantir que não venha começando como nula e sim vazia porém instanciada
	//o set é uma interface por isso ela não pode ser instanciada e tenho qeu usar uma classe correspondente a essa interface do mesmo que use o list e o arraylist
	//@Transient  //o transient impede que o JPA tente interpretar foi retirar pois vai ser feito pelo mapeamento
	@OneToMany(mappedBy = "id.product")
	private Set<OrderItem> items = new HashSet<>(); //usar o Set ao invés do List é para informar ao JPA que não admito repetição do mesmo item
	
	@ManyToMany
	@JoinTable(name = "tb_product_category",
	joinColumns = @JoinColumn(name = "product_id")) //nome da tabela no banco de dados / joincolumns referente ao nome da chave estrangeira referente a tabela de produto
	private Set<Category> categories = new HashSet<>() ;  //um produto tem várias categorias
	
	///vai ser usado o set por representar um conjunto ele irá garantir que não tem um produto com mais de uma ocorrencia da mesma categoria, o mesmo produto não tem a mesma categoria mais de uma vez
	//por já instanciar a coleção(categories) não precisa por num construtor
	public Product() {
		
	}
	
	public Product(Long id, String name, String description, Double price, String imgUrl) {
		super();
		this.id = id;
		this.name = name;
		this.description = description;
		this.price = price;
		this.imgUrl = imgUrl;
	}
	
	public Long getId() {
		return id;
	}
	
	public void setId(Long id) {
		this.id = id;
	}
	
	public String getName() {
		return name;
	}
	
	public void setName(String name) {
		this.name = name;
	}
	
	public String getDescription() {
		return description;
	}
	
	public void setDescription(String description) {
		this.description = description;
	}
	
	public Double getPrice() {
		return price;
	}
	
	public void setPrice(Double price) {
		this.price = price;
	}
	
	public String getImgUrl() {
		return imgUrl;
	}
	
	public void setImgUrl(String imgUrl) {
		this.imgUrl = imgUrl;
	}
	
	public Set<Category> getCategories() {
		return categories;
	}
		
	public Set<Order> getOrders(){ //varrer order item para percorrer cada objeto
		Set<Order> set = new HashSet<>();
		for(OrderItem x : items) { //percorrendo minha coleção items do tipo orderitens associada ao produto
			set.add(x.getOrder());
		}
		return set;
	}
	
	@Override
	public int hashCode() {
		return Objects.hash(id);
	}
	
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Product other = (Product) obj;
		return Objects.equals(id, other.id);
	}	
	
}
